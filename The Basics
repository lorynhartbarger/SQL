// The following notes will outline the basics of querying DB and DW using SQL

/*Basic SQL Commands:

SELECT - retrieves one or more rows from one or more tables. Ex: SELECE first_name, last_name FROM contacts; 

INSERT - adds one or more rows into a table. It only works against a single table. Ex: INSERT INTO contacts (first_name, last_name) VALUES ('Loryn','Hartbarger'); 
--Autoincrementing columns like an id column will automatically populate with an incremented number as new rows are added. Sometime used as the Primary Key--

UPDATE - modifies one or more rows in a table. Ex: UPDATE contacts SET last_name = 'Alston' WHERE id = 1;  
--if you do not specify a WHERE clause, every single row would be updated to Alston--

DELETE - removes one or more rows from a table. Ex: DELETE FROM contacts WHERE id = 3;
--if you do not specify a WHERE clause, every single row will be deleted--

SELECT * FROM table; will grab all columns in the table. This is a bad practice and it is better to explicitly list the column names. 

If you are querying from multiple tables, you need to specify the table each column comes from. Ex: SELECT person.fist_name, person.last_name, id.ss_number FROM person, id; 
--it is a good practice to table qualify the columns even if you are only pulling from one table as it may speed up the query process and it makes the statement easier to read--
--you can simplify this process by aliasing the table with a small acronym and use that as the table qualifier. Ex: FROM persons p. This is a best pratice.--
--You can also alias column names. Ex SELECT id AS idenity FROM source s.--

USE - declares which data base you are pulling from. EX: USE contacts; SELECT .... 

DISTINCT - restrains the results to unique values. EX: SELECT DISTINCT customer_id FROM orders; 
--You mat have mmultiple orders from the same customer_id, but if you only wanted to see a list of customers, use the distinct command.--
-- if you call multiple tables in your SELECT DISTINCT statement, you will return the distinct list of the combination of both columns. --

WHERE -  constrains the result set and comes after the FROM clause and contains boolean expressions. 

AND - contrains the result set where all conditions are true. Ex: SELECT * FROM table WHERE first_name = 'Loryn' AND last_name = 'Hartbarger'; 

OR - contrains the result set where at least one of the conditions is truw. Ex: SELECT * FROM table WHERE first_name = 'Loryn'  OR last_name = 'Alston'; 

BETWEEN - shorthand way to replace 2 statements >= and <= with one statement. Ex: SELECT * FROM table WHERE cost BETWEEN 100 AND 200;

LIKE - fuzzy search. Ex: SELECT * FROM table WHERE first_name LIKE L%; 
--this will return all rows where the field first name starts with 'L'. If you put the % before the L, it will return all rows that end in 'L'. --
--You can also sandwhich the % between to values like %ory%. This will fuzzy search on both ends of the string. --

IN - shorter way of using OR on the same field. Ex: SELECT * FROM movies WHERE title IN ('Clueless', 'Mean Girls', 'Lord of the Rings'); 

IS - only works against NULL. Ex: SELECT * FROM movies WHERE sequal_name IS NULL; 

IS NOT - only works against NULL. Ex: SELECT * FROM movies WHERE reviws IS NOT NULL; 

ORDER BY - sorts the results of the query. SELECT * FROM movies WHERE star = 'Leonardo DiCaprio' ORDER BY release_date DESC; 
-- use DESC or ASC to sort your data accourding to your needs.--

SET - computes new values from column values. Ex: COUNT, MAX, MIN, AVG, SUM
--COUNT is often used with DISTINCT. Ex: COUNT( DISTINCT actors). This will result in the list of distinct actors in the table.

GROUP BY - allows multiple columns in a SELECT statement and still use a set function. Ex: SELECT genre, SUM(box_office_sales) as total_sales FROM movies GROUP BY genre;

HAVING - used in queries with a GROUP BY clause. Ex: SELECT genre, SUM(box_office_sales) as total_sales FROM movies GROUP BY genre HAVING COUNT(DISTINCT title) >10 ; 

CROSS JOIN - simplest join, returns all rows from both tables, no WHERE clause. The least useful. Ex: SELECT m.title, d.age FROM movies m, director d; 
-- you do not want to do this type of JOIN unless you are specifically trying to do something. -- 



