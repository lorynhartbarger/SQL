/* For this project, I will provide examples of how the SQL Window Functions
can save time and increase performance. I will highlight the aggregate query
and then the analytical version using the Window functions*/

/*
SALES TABLE
order_id | product_id | sale_date  | quantity | price
---------+------------+------------+----------+-------
1        | 101        | 2022-01-01 | 5        | 10.00
2        | 102        | 2022-01-02 | 3        | 15.00
3        | 101        | 2022-01-03 | 2        | 10.00
4        | 103        | 2022-01-04 | 4        | 20.00
5        | 102        | 2022-01-05 | 6        | 15.00
6        | 101        | 2022-01-06 | 3        | 10.00
*/

*/ Row Number
Task: Rank the Sales orders based on price descending with unique row numbers.
If there is a tie, order by order_id.
-Aggregate Query
SELECT 
  (SELECT COUNT(*) FROM SALES S2 WHERE S2.price > S1.price 
    OR (S2.price = S1.price AND S2.order_id <= S1.order_id)) AS row_number,
  order_id,
  price
FROM SALES S1
ORDER BY row_number;
/* resulting data:
row_number | order_id | price
-----------+----------+-------
1          | 4        | 20.00
2          | 2        | 15.00
3          | 5        | 15.00
4          | 1        | 10.00
5          | 3        | 10.00
6          | 6        | 10.00
*/
-Window Function
SELECT 
  ROW_NUMBER() OVER (ORDER BY price DESC) AS row_number,
  order_id,
  price
FROM SALES;
/*resulting data:
row_number | order_id | price
-----------+----------+-------
1          | 4        | 20.00
2          | 2        | 15.00
3          | 5        | 15.00
4          | 1        | 10.00
5          | 3        | 10.00
6          | 6        | 10.00
*/
 

