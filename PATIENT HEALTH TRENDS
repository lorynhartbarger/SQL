/* For this project, I have three tables containing patient health care data:
PATIENTS (PATIENT_ID, PATIENT_NAME, AGE, GENDER, CITY)
VITAL_SIGNS (READING_ID,PATIENT_ID,READING_DATE,TEMP,BP,HEART_RATE, SYSTOLIC_BP,DIASTOLIC_BP)
LABS(RESULT_ID,PATIENT_ID,TEST_NAME,RESULT_VALUE,RESULT_DATE)
I will perform various health care analytics using the above tables
*/

--calculate the median age of pts (for pts with at least 3 vital sign readings
SELECT
  AVG(AGE) AS MEDIAN_AGE
FROM (
  SELECT
  P.AGE,
  ROW_NUMBER() OVER (ORDER BY P.AGE) AS ROW_NUM,
  COUNT(VS.READING_ID) AS VITAL_COUNT,  
  COUNT(*) OVER () TOTAL_COUNT
  FROM PATIENTS P
  JOIN VITAL_SIGNS VS ON P.PATIENT_ID = VS.PATIENT_ID
) AS SUBQUERY
WHERE ROW_NUM = CEIL((TOTAL_COUNT +1)/2)
  OR ROW_NUM = FLOOR((TOTAL_COUNT +1)/2)
  AND VITAL_COUNT >=3;

/* In the above query I assign a row number to each record using 
a window function ordered by age ascending. 
Then, I calculate the total number of records in the dataset. Next, I select 
the rows that have row numbers corresponding to the middle position in the data set 
and having a vital count greater than equal to 3. Finally, from my subquery, I 
calculate the average age which would result in the median age of pt with 
vital sign readings greater than or equal to 3. */

--identify patients with abnormal BP readings based on individual patient percentiles. 
SELECT
  P.PATIENT_ID,
  P.PATIENT_NAME,
  VS.SYSTOLIC_BP,
  VS.DIASTOLIC_BP
FROM PATIENTS P 
JOIN VITAL_SIGNS VS ON P.PATIENT_ID = VS.PATIENT_ID
GROUP BY P.PATIENT_ID, P.PATIENT_NAME
HAVING MAX(VS.SYSTOLIC_BP) > (SELECT PERCENTILE_COUNT(0.95) WITHIN GROUP (ORDER BY SYSTOLIC_BP) FROM VITAL_SIGNS)
  OR MAX(VS.DIASTOLIC_BP) > (SELECT PERCENTILE_COUNT(0.95) WITHIN GROUP (ORDER BY DIASTOLIC_BP) FROM VITAL_SIGNS);

/* In the above query, I identify the top 95% of both diastolic and systolic blood pressure readings from all patients.
This is used to limit the results to return patient info for those patients with either systolic or diastolic
BP >= to the 95th percentile. */

--identify the avg, min, and max heart rate by age group only condidering the lastest 
--readings.
SELECT
  CASE
    WHEN AGE >= 0 AND AGE <=5 THEN 'Infant-5'
    WHEN AGE >5 AND AGE <=12 THEN '6-12'
    WHEN AGE >12 AND AGE <18 THEN '13-17'
    WHEN AGE >=18 AND AGE <30 THEN '18-29'
    WHEN AGE >=30 AND AGE <40 THEN '30-39'
    WHEN AGE >=40 AND AGE <50 THEN '40-49'
    WHEN AGE >=50 AND AGE <60 THEN '50-59'
    WHEN AGE >=60 AND AGE <70 THEN '60-69'
    WHEN AGE >=70 AND AGE <80 THEN '70-79'
    ELSE '80+'
  END AS AGE_GROUP,
  AVG(HEART_RATE) AS AVG_HR,
  MIN(HEART_RATE) AS MIN_HR,
  MAX(HEART_RATE) AS MAX_HR
FROM (
  SELECT
    P.AGE,
    VS.HEART_RATE,
    ROW_NUMBER () OVER (PARTITION BY P.PATIENT_ID ORDER BY VS.READING_DATE DESC) AS RN
  FROM PATIENT P
  JOIN VITAL_SIGNS VS ON P.PATIENT_ID = VS.PATIENT_ID
) AS SUBQUERY 
WHERE RN = 1
GROUP BY AGE_GROUP; 

/* In the above query I start by classifying the age groups of patients and 
finding the avg, min,and max heart rates by age group. To limit my results to 
only the most rescentreadings for each patient, I use the 'ROW_NUMBER()' 
function to assign a row number for each record within each patient, ordered 
by the reading date in descending order.
By selecting only the row with a row number of 1, I ensure that I only consider 
the lastest reading for each patient */









